<?php
namespace CSCart\ApiDoc\Parser\NodeCollector;

use CSCart\ApiDoc\Parser\Context;
use CSCart\ApiDoc\Parser\Node\Class_;
use CSCart\ApiDoc\Parser\Node\ClassMethod;
use CSCart\ApiDoc\Parser\Node\ClassProperty;
use CSCart\ApiDoc\Parser\Node\Function_;
use CSCart\ApiDoc\Parser\Node\FunctionArgument;
use CSCart\ApiDoc\Parser\Node\Generic;
use SimpleXMLElement;
use XMLReader;

/**
 * Class PhpDocumentorNodeCollector is intented to collect nodes from XML file
 * generated by phpDocumentor.
 *
 * @package CSCart\ApiDoc\Parser
 */
class PhpDocumentorOutputNodeCollector implements NodeCollector
{
    /** @var string */
    protected $generated_xml_path;

    /** @var Context */
    protected $parser_context;

    /** @var string */
    protected $current_file;

    public function __construct($generated_xml_path)
    {
        $this->generated_xml_path = $generated_xml_path;
    }

    public function setParserContext(Context $context)
    {
        $this->parser_context = $context;
    }

    public function collectNodesToContext()
    {
        $xml_reader = new XMLReader();
        $xml_reader->open($this->generated_xml_path);

        while ($xml_reader->read()) {
            if ($xml_reader->nodeType == XMLReader::ELEMENT) {
                if ($xml_reader->localName == 'file') {
                    $this->current_file = $xml_reader->getAttribute('path');
                } elseif ($xml_reader->localName == 'function') {
                    $function_simple_xml = new SimpleXMLElement($xml_reader->readOuterXml());
                    $function_ = new Function_();
                    $this->collectFunctionNodeAttributes($function_, $function_simple_xml);
                    $this->parser_context->functions[] = $function_;
                } elseif ($xml_reader->localName == 'class') {
                    $class_simple_xml = new SimpleXMLElement($xml_reader->readOuterXml());
                    $class_ = new Class_();
                    $this->collectClassNodeAttributes($class_, $class_simple_xml);
                    $this->parser_context->classes[] = $class_;
                }
            }
        }
    }

    protected function collectFunctionNodeAttributes(Function_ $function_, SimpleXMLElement $xml_node)
    {
        $this->collectGenericNodeAttributes($function_, $xml_node);

        foreach ($xml_node->argument as $argument_xml) {
            $argument = new FunctionArgument();

            $this->collectFunctionArgumentNodeAttributes($argument, $argument_xml);

            $function_->addArgument($argument);
        }

        $this->parseFunctionDocBlockTags($function_, $xml_node);
    }

    /**
     * @param \CSCart\ApiDoc\Parser\Node\Function_ $function_
     * @param \SimpleXMLElement                    $xml_node
     */
    protected function parseFunctionDocBlockTags(Function_ $function_, SimpleXMLElement $xml_node)
    {
        foreach ($xml_node->docblock->tag as $docblock_tag) {
            switch ($docblock_tag['name']) {
                case 'param':
                    if (isset($function_->getArguments()[(string) $docblock_tag['variable']])) {
                        /** @var FunctionArgument $argument */
                        $argument = $function_->getArguments()[(string) $docblock_tag['variable']];
                        $argument->setDescription(html_entity_decode((string) $docblock_tag['description']));

                        if (!$argument->getType() && strlen((string) $docblock_tag['type'])) {
                            $argument->setType((string) $docblock_tag['type']);
                        }
                    }
                    break;
                case 'return':
                    $function_->setReturnType((string) $docblock_tag['type']);
                    $function_->setReturnDescription(html_entity_decode((string) $docblock_tag['description']));

                    break;
            }
        }
    }

    protected function collectFunctionArgumentNodeAttributes(FunctionArgument $argument, SimpleXMLElement $argument_xml)
    {
        $argument->setName((string) $argument_xml->name);
        $argument->setByReference($this->stringToBool((string) $argument_xml['by_reference']));
        $argument->setDefaultValue((string) $argument_xml->default);
        $argument->setType((string) $argument_xml->type);
    }

    protected function collectClassNodeAttributes(Class_ $class_, SimpleXMLElement $xml_node)
    {
        $this->collectGenericNodeAttributes($class_, $xml_node);

        $class_->setIsAbstract($this->stringToBool((string) $xml_node['abstract']));
        $class_->setIsFinal($this->stringToBool((string) $xml_node['final']));

        if (!empty($xml_node->extends)) {
            $class_->setExtends((string) $xml_node->extends);
        }

        foreach ($xml_node->method as $method_xml_node) {
            $class_method = new ClassMethod();

            $this->collectClassMethodNodeAttributes($class_method, $method_xml_node);

            $class_->addMethod($class_method);
            $class_method->setOwnerClass($class_);
        }


        foreach ($xml_node->property as $property_xml_node) {
            $class_property = new ClassProperty();

            $this->collectClassPropertyNodeAttributes($class_property, $property_xml_node);

            $class_->addProperty($class_property);
            $class_property->setOwnerClass($class_);
        }

        $class_->sortMethods();
        $class_->sortProperties();
    }

    protected function collectClassPropertyNodeAttributes(
        ClassProperty $class_property,
        SimpleXMLElement $property_xml_node
    ) {
        $this->collectGenericNodeAttributes($class_property, $property_xml_node);

        $class_property->setIsStatic($this->stringToBool((string) $property_xml_node['static']));
        $class_property->setVisibility((string) $property_xml_node['visibility']);
        $class_property->setDefaultValue((string) $property_xml_node->default);

        foreach ($property_xml_node->docblock->tag as $docblock_tag) {
            if ($docblock_tag['name'] == 'var') {
                $class_property->setType((string) $docblock_tag['type']);
                if (!$class_property->getDescription() && strlen((string) $docblock_tag['description'])) {
                    $class_property->setDescription((string) $docblock_tag['description']);
                }
            }
        }
    }

    protected function collectClassMethodNodeAttributes(ClassMethod $class_method, SimpleXMLElement $method_xml_node)
    {
        $this->collectFunctionNodeAttributes($class_method, $method_xml_node);

        $class_method->setIsFinal($this->stringToBool((string) $method_xml_node['final']));
        $class_method->setIsAbstract($this->stringToBool((string) $method_xml_node['abstract']));
        $class_method->setIsStatic($this->stringToBool((string) $method_xml_node['static']));
        $class_method->setVisibility((string) $method_xml_node['visibility']);
    }

    protected function collectGenericNodeAttributes(Generic $generic_node, SimpleXMLElement $xml_node)
    {
        $generic_node->setFile($this->current_file);
        $generic_node->setNamespace((string) $xml_node['namespace']);
        $generic_node->setName((string) $xml_node->name);
        $generic_node->setLine(isset($xml_node['line']) ? (int) $xml_node['line'] : null);

        if (isset($xml_node->docblock)) {
            if (isset($xml_node->docblock->description)) {
                $generic_node->setDescription((string) $xml_node->docblock->description);
            }
            if (isset($xml_node->{'long_description'})) {
                $generic_node->setDescription(
                    trim($generic_node->getDescription() . PHP_EOL . $xml_node->docblock->{'long_description'})
                );
            }
        }
    }


    protected function stringToBool($string)
    {
        if (is_string($string)) {
            if ($string == 'false') {
                return false;
            } elseif ($string == 'true') {
                return true;
            }
        }

        return null;
    }
}